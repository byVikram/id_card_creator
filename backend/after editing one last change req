from flask import Flask, request, jsonify
from flask_cors import CORS
import mysql.connector
import json
import qrcode
from sharedid import update_shared_id,shared_id
from PIL import Image, ImageDraw, ImageFont
import os


db = mysql.connector.connect(
    host='localhost',
    user='vikram',  # Replace with your MySQL username
    password='vikram',  # Replace with your MySQL password
    database='qrcode',  # Replace with the name of the MySQL database you created
)

app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "*"}})

UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER



@app.route('/api/register', methods=['POST'])
def reg():

    name = request.form.get('fname')
    id = request.form.get('id')
    contact = request.form.get('contact')
    file=request.files['file']

    if file.filename == '':
        print("error in file")
    else:
        print("no error in file")


    update_shared_id(id)




    print(request.form)
    print(name)
    if not name or not id or not contact:
        return jsonify({'message': 'Invalid data'}), 400


    cursor = db.cursor()
    cursor.execute('SELECT * FROM users WHERE id = %s ', (id,))
    status = cursor.fetchone()
    if status:
        return jsonify({'message': 'User already exist  '}), 200
    else:

        try:
            print("entered database")
            cursor.execute('INSERT INTO users (fname, id, contact) VALUES (%s, %s, %s)',
                           (name, id, contact))
            db.commit()
    #qr code start
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(id)
            qr.make(fit=True)
            qr_img = qr.make_image(fill_color="black", back_color="white")
            prefix=str(id)
            pic_name = prefix+"pic"+".png"
            prefix =prefix+ ".png"
            qr_img.save(prefix)
    #qr code end

            from PIL import Image, ImageDraw, ImageFont
            from sharedid import shared_id

            print(shared_id, "hello")

            # Create a blank ID card template
            width, height = 400, 500
            background_color = (255, 255, 255)
            id_card = Image.new('RGB', (width, height), background_color)
            draw = ImageDraw.Draw(id_card)

            font = ImageFont.truetype("arial.ttf", 20)

            # Add ID card information
            photo = Image.open("one.png")  # Replace with the path to the photo
            prpic=pic_name
            id_number = shared_id
            card_name = name


            photo = photo.resize((150, 150))
            id_card.paste(photo, (125, 20))
            id_card.paste(photo, (125, 345))

            draw.text((30, 200), "ID Number", fill=(0, 0, 0), font=font)
            draw.text((140, 200), ":", fill=(0, 0, 0), font=font)
            draw.text((150, 200), id_number, fill=(0, 0, 0), font=font)

            draw.text((30, 240), "Name", fill=(0, 0, 0), font=font)
            draw.text((140, 240), ":", fill=(0, 0, 0), font=font)
            draw.text((150, 240), card_name, fill=(0, 0, 0), font=font)

            draw.text((30, 280), "Contact", fill=(0, 0, 0), font=font)
            draw.text((140, 280), ":", fill=(0, 0, 0), font=font)
            draw.text((150, 280), contact, fill=(0, 0, 0), font=font)

            # Paste the photo on the ID card
            photo = photo.resize((100, 100))  # Resize the photo to fit
            id_card.paste(photo, (400, 20))

            # Save the ID card

            id_card.save("id_card.png")
            # Display the ID card (optional)
            id_card.show()

# profile image start
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], pic_name))
            print("saving file")
            # profile image end


            return jsonify({'fileUrl': "file uploaded"})

        except Exception as e:
            db.rollback()
            return jsonify({'fileUrl': 'Failed to register user'}), 500

def second():
    print("second defnition")



if __name__ == '__main__':
    app.run(debug=True)